# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-10-09 23:53
from __future__ import unicode_literals

import ckeditor.fields
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('upper_unit', models.CharField(blank=True, choices=[('Ngaloba Beds', 'Ngaloba Beds'), ('Lower Ngaloba Beds', 'Lower Ngaloba Beds'), ('Upper Ngaloba Beds', 'Upper Ngaloba Beds'), ('?Ngaloba Beds', '?Ngaloba Beds'), ('Olpiro Beds', 'Olpiro Beds'), ('Naibadad Beds', 'Naibadad Beds'), ('Olgol Lavas', 'Olgol Lavas'), ('Ndolanya Beds', 'Ndolanya Beds'), ('Upper Ndolanya Beds', 'Upper Ndolanya Beds'), ('Lower Ndolanya Beds', 'Lower Ndolanya Beds'), ('Laetolil Beds', 'Laetolil Beds'), ('Upper Laetolil Beds', 'Upper Laetolil Beds'), ('Lower Laetolil Beds', 'Lower Laetolil Beds')], default='Ma', max_length=256, null=True)),
                ('lower_unit', models.CharField(blank=True, choices=[('Ngaloba Beds', 'Ngaloba Beds'), ('Lower Ngaloba Beds', 'Lower Ngaloba Beds'), ('Upper Ngaloba Beds', 'Upper Ngaloba Beds'), ('?Ngaloba Beds', '?Ngaloba Beds'), ('Olpiro Beds', 'Olpiro Beds'), ('Naibadad Beds', 'Naibadad Beds'), ('Olgol Lavas', 'Olgol Lavas'), ('Ndolanya Beds', 'Ndolanya Beds'), ('Upper Ndolanya Beds', 'Upper Ndolanya Beds'), ('Lower Ndolanya Beds', 'Lower Ndolanya Beds'), ('Laetolil Beds', 'Laetolil Beds'), ('Upper Laetolil Beds', 'Upper Laetolil Beds'), ('Lower Laetolil Beds', 'Lower Laetolil Beds')], default='Ma', max_length=256, null=True)),
                ('likely_unit', models.CharField(blank=True, choices=[('Ngaloba Beds', 'Ngaloba Beds'), ('Lower Ngaloba Beds', 'Lower Ngaloba Beds'), ('Upper Ngaloba Beds', 'Upper Ngaloba Beds'), ('?Ngaloba Beds', '?Ngaloba Beds'), ('Olpiro Beds', 'Olpiro Beds'), ('Naibadad Beds', 'Naibadad Beds'), ('Olgol Lavas', 'Olgol Lavas'), ('Ndolanya Beds', 'Ndolanya Beds'), ('Upper Ndolanya Beds', 'Upper Ndolanya Beds'), ('Lower Ndolanya Beds', 'Lower Ndolanya Beds'), ('Laetolil Beds', 'Laetolil Beds'), ('Upper Laetolil Beds', 'Upper Laetolil Beds'), ('Lower Laetolil Beds', 'Lower Laetolil Beds')], default='Ma', max_length=256, null=True)),
                ('max_age', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('max_age_system', models.CharField(blank=True, default='Ma', max_length=10, null=True)),
                ('min_age', models.DecimalField(blank=True, decimal_places=5, max_digits=20, null=True)),
                ('min_age_system', models.CharField(blank=True, default='Ma', max_length=10, null=True)),
                ('age_uncertainty', models.DecimalField(blank=True, decimal_places=5, help_text='In years as defined by DwC', max_digits=20, null=True)),
                ('age_protocol', models.CharField(blank=True, choices=[('Amino acid racimization', 'Amino acid racimization'), ('40Ar/39Ar dating', '40Ar/39Ar dating'), ('40Ar/39Ar dating, bayesian interpolation', '40Ar/39Ar dating, bayesian interpolation'), ('Biochronology', 'Biochronology')], max_length=256, null=True)),
                ('age_references', models.TextField(blank=True, null=True)),
                ('age_remarks', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Find',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('georeference_remarks', models.TextField(blank=True, max_length=500, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('date_recorded', models.DateTimeField(blank=True, help_text='Date and time the item was observed or collected.', null=True, verbose_name='Date Rec')),
                ('year_collected', models.IntegerField(blank=True, help_text='The year, event or field campaign during which the item was found.', null=True, verbose_name='Year')),
                ('barcode', models.IntegerField(blank=True, help_text='For collected items only.', null=True, verbose_name='Barcode')),
                ('field_number', models.CharField(blank=True, max_length=50, null=True)),
                ('catalog_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Cat. No.')),
                ('locality_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Locality')),
                ('area_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Locality')),
                ('description', models.TextField(blank=True, null=True)),
                ('item_count', models.IntegerField(blank=True, null=True)),
                ('disposition', models.CharField(blank=True, max_length=255, null=True)),
                ('institution', models.CharField(blank=True, max_length=255, null=True)),
                ('geological_context_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Geol. Context')),
                ('verbatim_workbook_name', models.TextField(blank=True, null=True)),
                ('verbatim_workbook_year', models.IntegerField(blank=True, null=True)),
                ('verbatim_specimen_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='specimen_number')),
                ('verbatim_date_discovered', models.DateField(blank=True, null=True)),
                ('verbatim_storage', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_tray', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_locality', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_horizon', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_element', models.TextField(blank=True, max_length=255, null=True)),
                ('verbatim_kingdom', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_phylum_subphylum', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_class', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_order', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_family', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_tribe', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_genus', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_species', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_other', models.TextField(blank=True, null=True)),
                ('verbatim_weathering', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_breakage', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_animal_damage', models.TextField(blank=True, null=True)),
                ('verbatim_nonanimal_damage', models.TextField(blank=True, null=True)),
                ('verbatim_comments', models.TextField(blank=True, null=True)),
                ('verbatim_published', models.TextField(blank=True, null=True)),
                ('verbatim_problems', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identified_by', models.CharField(blank=True, max_length=255, null=True)),
                ('date_identified', models.DateField(blank=True, null=True)),
                ('reference', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IdentificationQualifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=15, unique=True)),
                ('qualified', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Laetoli ID Qualifier',
                'verbose_name_plural': 'Laetoli ID Qualifiers',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('georeference_remarks', models.TextField(blank=True, max_length=500, null=True)),
                ('formation', models.CharField(blank=True, max_length=50, null=True)),
                ('member', models.CharField(blank=True, max_length=50, null=True)),
                ('area', models.CharField(blank=True, choices=[('Laetoli', 'Laetoli'), ('Kakesio', 'Kakesio'), ('Esere', 'Esere-Noiti')], max_length=255, null=True)),
                ('unit', models.CharField(blank=True, choices=[('Ngaloba Beds', 'Ngaloba Beds'), ('Lower Ngaloba Beds', 'Lower Ngaloba Beds'), ('Upper Ngaloba Beds', 'Upper Ngaloba Beds'), ('?Ngaloba Beds', '?Ngaloba Beds'), ('Olpiro Beds', 'Olpiro Beds'), ('Naibadad Beds', 'Naibadad Beds'), ('Olgol Lavas', 'Olgol Lavas'), ('Ndolanya Beds', 'Ndolanya Beds'), ('Upper Ndolanya Beds', 'Upper Ndolanya Beds'), ('Lower Ndolanya Beds', 'Lower Ndolanya Beds'), ('Laetolil Beds', 'Laetolil Beds'), ('Upper Laetolil Beds', 'Upper Laetolil Beds'), ('Lower Laetolil Beds', 'Lower Laetolil Beds')], max_length=255, null=True)),
                ('horizon', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('date_last_modified', models.DateTimeField(auto_now=True, verbose_name='Date Last Modified')),
            ],
            options={
                'verbose_name': 'Laetoli Locality',
                'verbose_name_plural': 'Laetoli Localities',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('label', models.CharField(blank=True, help_text='For a species, the name field contains the specific epithet and the label contains the full \n    scientific name, e.g. Homo sapiens, name = sapiens, label = Homo sapiens', max_length=244, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eppe.Taxon')),
            ],
            options={
                'verbose_name': 'Laetoli Taxon',
                'verbose_name_plural': 'Laetoli Taxa',
            },
        ),
        migrations.CreateModel(
            name='TaxonRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was first created.', verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time this resource was last altered.', verbose_name='Modified')),
                ('problem', models.BooleanField(default=False, help_text='Is there a problem with this record that needs attention?')),
                ('problem_comment', models.TextField(blank=True, help_text='Description of the problem.', max_length=255, null=True)),
                ('remarks', ckeditor.fields.RichTextField(blank=True, help_text='General remarks about this database record.', null=True, verbose_name='Record Remarks')),
                ('last_import', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('plural', models.CharField(max_length=50, unique=True)),
                ('ordinal', models.IntegerField(unique=True)),
            ],
            options={
                'verbose_name': 'Laetoli Taxon Rank',
                'verbose_name_plural': 'Laetoli Taxon Ranks',
            },
        ),
        migrations.CreateModel(
            name='Fossil',
            fields=[
                ('find_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='eppe.Find')),
                ('sex', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sex')),
                ('tkingdom', models.CharField(blank=True, max_length=255, null=True, verbose_name='Kingdom')),
                ('tphylum', models.CharField(blank=True, max_length=255, null=True, verbose_name='Phylum')),
                ('tsubphylum', models.CharField(blank=True, max_length=255, null=True, verbose_name='Phylum')),
                ('tclass', models.CharField(blank=True, max_length=255, null=True, verbose_name='Class')),
                ('torder', models.CharField(blank=True, max_length=255, null=True, verbose_name='Order')),
                ('tfamily', models.CharField(blank=True, max_length=255, null=True, verbose_name='Family')),
                ('tsubfamily', models.CharField(blank=True, max_length=255, null=True, verbose_name='Subfamily')),
                ('ttribe', models.CharField(blank=True, max_length=255, null=True, verbose_name='Tribe')),
                ('tgenus', models.CharField(blank=True, max_length=255, null=True, verbose_name='Genus')),
                ('tspecies', models.CharField(blank=True, max_length=255, null=True, verbose_name='Trivial')),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('taxon_rank', models.CharField(blank=True, max_length=255, null=True)),
                ('identification_qualifier', models.CharField(blank=True, max_length=255, null=True)),
                ('taxon_remarks', models.TextField(blank=True, max_length=255, null=True)),
                ('identified_by', models.CharField(blank=True, max_length=20, null=True)),
                ('full_taxon', models.TextField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Laetoli Fossil',
                'verbose_name_plural': 'Laetoli Fossils',
            },
            bases=('eppe.find',),
        ),
        migrations.AddField(
            model_name='taxon',
            name='rank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eppe.TaxonRank'),
        ),
        migrations.AddField(
            model_name='identification',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eppe.Taxon'),
        ),
        migrations.AddField(
            model_name='find',
            name='context',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='eppe.Context'),
        ),
        migrations.AddField(
            model_name='identification',
            name='fossil',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eppe.Fossil'),
        ),
        migrations.AddField(
            model_name='fossil',
            name='identifications',
            field=models.ManyToManyField(through='eppe.Identification', to='eppe.Taxon'),
        ),
    ]
