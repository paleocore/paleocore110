from django.contrib.gis.db import models
from django.contrib.contenttypes.models import ContentType
from django.apps import apps
import os
from mlp.ontologies import BASIS_OF_RECORD_VOCABULARY, ITEM_TYPE_VOCABULARY, COLLECTING_METHOD_VOCABULARY, \
    COLLECTOR_CHOICES, SIDE_VOCABULARY
import projects.models
import collections

FIELD_SEASON_CHOICES = (('Jan 2014', 'Jan 2014'),
                        ('Nov 2014', 'Nov 2014'),
                        ('Nov 2015', 'Nov 2015'),
                        ('Jan 2018', 'Jan 2018'))


# Model for occurrence table generated by inspect.db
class Occurrence(projects.models.PaleoCoreOccurrenceBaseClass):
    basis_of_record = models.CharField("Basis of Record", max_length=50, blank=True, null=False,
                                       choices=BASIS_OF_RECORD_VOCABULARY)  # NOT NULL
    item_type = models.CharField("Item Type", max_length=255, blank=True, null=False,
                                 choices=ITEM_TYPE_VOCABULARY)  # NOT NULL
    collection_code = models.CharField("Collection Code", max_length=20, blank=True, null=True, default='MLP')
    # Note we're not using localities!
    item_number = models.IntegerField("Item #", null=True, blank=True)
    item_part = models.CharField("Item Part", max_length=10, null=True, blank=True)
    catalog_number = models.CharField("Catalog #", max_length=255, blank=True, null=True)
    # TODO add rich text field for remarks
    # remarks = models.TextField(max_length=255, null=True, blank=True)
    item_scientific_name = models.CharField("Sci Name", max_length=255, null=True, blank=True)
    item_description = models.CharField("Description", max_length=255, blank=True, null=True)
    # georeference_remarks = models.CharField(max_length=50, null=True, blank=True)
    collecting_method = models.CharField("Collecting Method", max_length=50,
                                         choices=COLLECTING_METHOD_VOCABULARY, null=False)  # NOT NULL
    related_catalog_items = models.CharField("Related Catalog Items", max_length=50, null=True, blank=True)
    collector = models.CharField(max_length=50, blank=True, null=True, choices=COLLECTOR_CHOICES)
    finder = models.CharField(max_length=50, blank=True, null=True)
    disposition = models.CharField(max_length=255, blank=True, null=True)
    field_season = models.CharField(max_length=50, null=True, blank=True, choices=FIELD_SEASON_CHOICES)
    individual_count = models.IntegerField(blank=True, null=True, default=1)
    preparation_status = models.CharField(max_length=50, blank=True, null=True)
    stratigraphic_marker_upper = models.CharField(max_length=255, blank=True, null=True)
    distance_from_upper = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_lower = models.CharField(max_length=255, blank=True, null=True)
    distance_from_lower = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_found = models.CharField(max_length=255, blank=True, null=True)
    distance_from_found = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_marker_likely = models.CharField(max_length=255, blank=True, null=True)
    distance_from_likely = models.DecimalField(max_digits=38, decimal_places=8, blank=True, null=True)
    stratigraphic_member = models.CharField(max_length=255, blank=True, null=True)
    analytical_unit = models.CharField("Submember", max_length=255, blank=True, null=True)
    analytical_unit_2 = models.CharField(max_length=255, blank=True, null=True)
    analytical_unit_3 = models.CharField(max_length=255, blank=True, null=True)
    in_situ = models.BooleanField(default=False)
    ranked = models.BooleanField(default=False)
    image = models.FileField(max_length=255, blank=True, upload_to="uploads/images/mlp", null=True)
    weathering = models.SmallIntegerField(blank=True, null=True)
    surface_modification = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        """
        What is the best string representation for an occurrence instance?
        All collected items have catalogue numbers, but observations do not
        This method returns the catalog number if it exists, or a string with the id value
        if there is no catalog number.
        """
        if self.catalog_number:
            return self.catalog_number
        else:
            return "item "+str(self.id)

    def point_x(self):
        try:
            return self.geom.x
        except:
            return 0

    def point_y(self):
        try:
            return self.geom.y
        except:
            return 0

    def easting(self):
        try:
            utm_point = self.geom.transform(32637, clone=True)  # get a copy of the point in utm
            return utm_point.x
        except:
            return 0

    def northing(self):
        try:
            utm_point = self.geom.transform(32637, clone=True)
            return utm_point.y
        except:
            return 0

    def photo(self):
        try:
            return '<a href="%s"><img src="%s" style="width:600px" /></a>' \
                   % (os.path.join(self.image.url), os.path.join(self.image.url))
        except:
            return None
    photo.short_description = 'Photo'
    photo.allow_tags = True
    photo.mark_safe = True

    def thumbnail(self):
        try:
            return '<a href="%s"><img src="%s" style="width:100px" /></a>' \
                   % (os.path.join(self.image.url), os.path.join(self.image.url))
        except:
            return None
    thumbnail.short_description = 'Thumb'
    thumbnail.allow_tags = True
    thumbnail.mark_safe = True

    def get_subtype(self):
        """
        Determine if an Occurrence instance has a subtype instance and if so what it is.
        :return: Returns a list of the matching subtype class or classes. Should never be more than one.
        """
        result = []
        try:
            Archaeology.objects.get(pk=self.id)
            result.append(Archaeology)
        except Archaeology.DoesNotExist:
            pass
        try:
            Biology.objects.get(pk=self.id)
            result.append(Biology)
        except Biology.DoesNotExist:
            pass
        try:
            Geology.objects.get(pk=self.id)
            result.append(Geology)
        except Geology.DoesNotExist:
            pass
        return result


    def get_subtype_generic(self):
        """
        Determine if an instance has a subtype, and if so what it is. Generic version
        :return:
        """
        cts = ContentType.objects.filter(app_label=self._meta.app_label)

    @staticmethod
    def get_duplicate_barcodes():
        """
        Locate occurrence objects with duplicate barcodes
        :return: Returns a list of barcodes that are duplicated, e.g. [
        """
        all_occurrences = Occurrence.objects.all()
        barcode_list = []
        duplicate_list = []
        for item in all_occurrences:
                barcode_list.append(item.barcode)
        for barcode, count in list(collections.Counter(barcode_list).items()):
            if count > 1 and barcode not in [None, 0]:
                duplicate_list.append(barcode)
        return duplicate_list

    @staticmethod
    def get_duplicate_barcode_objects():
        """
        Locate occurrence objects with duplicate barcodes (should never happen)
        :return: Returns a two key dicitonary with barcode and queryset objects where each element is a queryset for duplicate barcodes,
        e.g. {'barcode':1999, 'queryset':[<GeoQuerySet [<Occurrence: MLP-1946>, <Occurrence: MLP-1946>]>]
        """
        result = []
        for b in Occurrence.get_duplicate_barcodes():
            dup_dict = {}
            dup_dict['barcode'] = b
            dup_dict['queryset'] = Occurrence.objects.filter(barcode=b)
            result.append(dup_dict)
        return result

    @staticmethod
    def get_missing_barcode_objects():
        """
        Locate occurrence objects that should have barcodes but do not.
        :return:
        """
        result = []
        for o in Occurrence.objects.filter(basis_of_record='FossilSpecimen'):
            if o.barcode in [None, 0, '']:
                result.append(o)
        return result

    @staticmethod
    def fields_to_display():
        fields = ("id", "barcode")
        return fields

    class Meta:
        managed = True
        #db_table = 'mlp_occurrence'
        verbose_name = '01-MLP Occurrence'
        verbose_name_plural = '01-MLP Occurrences'

class Archaeology(Occurrence):
    find_type = models.CharField(null=True, blank=True, max_length=255)
    length_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    width_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)

    class Meta:
        verbose_name = "02-MLP Archaeology"
        verbose_name_plural = "02-MLP Archaeology"


class Biology(Occurrence):
    infraspecific_epithet = models.CharField(null=True, blank=True, max_length=50)
    infraspecific_rank = models.CharField(null=True, blank=True, max_length=50)
    author_year_of_scientific_name = models.CharField(null=True, blank=True, max_length=50)
    nomenclatural_code = models.CharField(null=True, blank=True, max_length=50)
    #identification_qualifier = models.CharField(null=True, blank=True, max_length=50)
    identified_by = models.CharField(null=True, blank=True, max_length=100, choices=COLLECTOR_CHOICES)
    date_identified = models.DateTimeField(null=True, blank=True)
    type_status = models.CharField(null=True, blank=True, max_length=50)
    sex = models.CharField(null=True, blank=True, max_length=50)
    life_stage = models.CharField(null=True, blank=True, max_length=50)
    preparations = models.CharField(null=True, blank=True, max_length=50)
    morphobank_number = models.IntegerField(null=True, blank=True)
    side = models.CharField(null=True, blank=True, max_length=50, choices=SIDE_VOCABULARY)
    attributes = models.CharField(null=True, blank=True, max_length=50)
    fauna_notes = models.TextField(null=True, blank=True, max_length=64000)
    tooth_upper_or_lower = models.CharField(null=True, blank=True, max_length=10)
    tooth_number = models.CharField(null=True, blank=True, max_length=50)
    tooth_type = models.CharField(null=True, blank=True, max_length=50)
    um_tooth_row_length_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    um_1_length_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    um_1_width_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    um_2_length_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    um_2_width_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    um_3_length_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    um_3_width_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_tooth_row_length_mm = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_1_length = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_1_width = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_2_length = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_2_width = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_3_length = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    lm_3_width = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    element = models.CharField(null=True, blank=True, max_length=50)
    element_modifier = models.CharField(null=True, blank=True, max_length=50)
    uli1 = models.BooleanField(default=False)
    uli2 = models.BooleanField(default=False)
    uli3 = models.BooleanField(default=False)
    uli4 = models.BooleanField(default=False)
    uli5 = models.BooleanField(default=False)
    uri1 = models.BooleanField(default=False)
    uri2 = models.BooleanField(default=False)
    uri3 = models.BooleanField(default=False)
    uri4 = models.BooleanField(default=False)
    uri5 = models.BooleanField(default=False)
    ulc = models.BooleanField(default=False)
    urc = models.BooleanField(default=False)
    ulp1 = models.BooleanField(default=False)
    ulp2 = models.BooleanField(default=False)
    ulp3 = models.BooleanField(default=False)
    ulp4 = models.BooleanField(default=False)
    urp1 = models.BooleanField(default=False)
    urp2 = models.BooleanField(default=False)
    urp3 = models.BooleanField(default=False)
    urp4 = models.BooleanField(default=False)
    ulm1 = models.BooleanField(default=False)
    ulm2 = models.BooleanField(default=False)
    ulm3 = models.BooleanField(default=False)
    urm1 = models.BooleanField(default=False)
    urm2 = models.BooleanField(default=False)
    urm3 = models.BooleanField(default=False)
    lli1 = models.BooleanField(default=False)
    lli2 = models.BooleanField(default=False)
    lli3 = models.BooleanField(default=False)
    lli4 = models.BooleanField(default=False)
    lli5 = models.BooleanField(default=False)
    lri1 = models.BooleanField(default=False)
    lri2 = models.BooleanField(default=False)
    lri3 = models.BooleanField(default=False)
    lri4 = models.BooleanField(default=False)
    lri5 = models.BooleanField(default=False)
    llc = models.BooleanField(default=False)
    lrc = models.BooleanField(default=False)
    llp1 = models.BooleanField(default=False)
    llp2 = models.BooleanField(default=False)
    llp3 = models.BooleanField(default=False)
    llp4 = models.BooleanField(default=False)
    lrp1 = models.BooleanField(default=False)
    lrp2 = models.BooleanField(default=False)
    lrp3 = models.BooleanField(default=False)
    lrp4 = models.BooleanField(default=False)
    llm1 = models.BooleanField(default=False)
    llm2 = models.BooleanField(default=False)
    llm3 = models.BooleanField(default=False)
    lrm1 = models.BooleanField(default=False)
    lrm2 = models.BooleanField(default=False)
    lrm3 = models.BooleanField(default=False)
    taxon = models.ForeignKey('Taxon',
                              default=0, on_delete=models.SET_DEFAULT,  # prevent deletion when taxa deleted
                              related_name='mlp_biology_occurrences')
    identification_qualifier = models.ForeignKey('IdentificationQualifier', null=True, blank=True,
                                                 on_delete=models.SET_NULL,
                                                 related_name='mlp_biology_occurrences')

    def __str__(self):
        return str(self.taxon.__str__())

    def match_taxon(self):
        """
        find taxon objects from item_scientific_name
        Return: (True/False, match_count, match_list)
        """
        match_list = Taxon.objects.filter(name=self.item_scientific_name)
        if len(match_list) == 1:  # one match
            result_tuple = (True, 1, match_list)
        else:
            result_tuple = (False, len(match_list), match_list)
        return result_tuple

    class Meta:
        verbose_name = "03-MLP Biology"
        verbose_name_plural = "03-MLP Biology"
        #db_table='mlp_biology'


class Geology(Occurrence):
    find_type = models.CharField(null=True, blank=True, max_length=255)
    dip = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    strike = models.DecimalField(max_digits=38, decimal_places=8, null=True, blank=True)
    color = models.CharField(null=True, blank=True, max_length=255)
    texture = models.CharField(null=True, blank=True, max_length=255)

    class Meta:
        verbose_name = "04-MLP Geology"
        verbose_name_plural = "04-MLP Geology"


class TaxonRank(projects.models.TaxonRank):
    class Meta:
        verbose_name = "06-MLP Taxon Rank"
        verbose_name_plural = "06-MLP Taxon Ranks"


class Taxon(projects.models.Taxon):
    parent = models.ForeignKey('self', null=True, blank=True)
    rank = models.ForeignKey('TaxonRank')

    class Meta:
        verbose_name = "05-MLP Taxon"
        verbose_name_plural = "05-MLP Taxa"
        ordering = ['rank__ordinal', 'name']


class IdentificationQualifier(projects.models.IdentificationQualifier):

    class Meta:
        verbose_name = "07-MLP ID Qualifier"




